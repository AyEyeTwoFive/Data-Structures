Asef Islam
aislam5
aislam5@jhu.edu
Data Structures Spring 2019 Assignment 1

Part A:
1. My algorithm works as follows:
    a. initializes an array of vectors (with maximum size set to the number of command line arguments)
    b. parses integers from the command line arguments index by index (and throws exception for non-integers)
    c. checks if each integer is already in the array by comparing index by index
    d. if it is not, it adds it to the array
    e. once it has processed all command line arguments, prints each integer in the array
2.  This was basically the approach that I started with, although initially I used the vector class instead of arrays
    because I was unaware of the requirement against this. I then had to adapt my code to use arrays, which made it
    slightly more difficult but still not too bad. I just had to implement new, slightly more involved methods of
    checking whether the integers were unique, indexing and exception handling.
3.  I am mostly using IntelliJ for development, and had some trouble initially setting it up but eventually was able
    to figure things out. I had some difficulty figuring out the "project"- based interface of IntelliJ. I also
    started by using Ubuntu for Windows for command line and code running purposes and it took me some time to figure
    out the installation and how to run code. Another tricky step was setting up git integration, although that isn't
    yet necessarily a requirement. However going through all this to get the environment set up was very useful, and I
    feel prepared to develop from here on out.

Part B:
1. For Resetable counter to extend counter means that Resetable counter has all of the same functionality as a regular
    counter, plus some added functionality as well. Generally an interface that extends another has all the same
    functionality as that interface being extended, plus some more.
2. Any Resetable counter is also a counter, but any counter is not necessarily a resetable counter.
3. With testAnyCounter taking any resetable counter as its argument, all types of resetable counters can be tested
    together in one function. Thus, the tests in that function should be able to apply to any type of resetable counter
    that is passed in, ensuring that they all have the basic expected proper functionality of a resetable counter.

Part C:
    adt MultiCounter
        uses Integer
        defines MultiCounter
        operations
           new: Integer x Integer ---> MultiCounter
           up: MultiCounter ---> MultiCounter
           down: MultiCounter ---> MultiCounter
           value: MultiCounter ---> Integer
        axioms
           value(new(s,f)) = s
           value(up(c)) = value(c) * d
           value(down(c)) = ceil(value(c) / d)

    1. Counter seems more abstract in the sense that it is more general and has less specific implementations than
        FlexCounter or MultiCounter. Counter requires less information to operate its implementations, (ex. it always
        increments by 1 and doesn't need an additional specified value for the increment).
    2. An even more abstract ADT than Counter would be any ADT that increments up and down but not necessarily with a
        fixed operation (like up adding one to the value and down subtracting by one). For example, more abstract
        axioms could be value(up(c)) > value(c) and value(down(c)) < down(c).