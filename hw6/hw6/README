Part A:
    Errors:
    1. Previous Function - I wrote a test where I tried the previous function on the element at the front of the
    list. This should throw a Position Exception because obviously there is nothing before the first element.
    However, the test failed because the exception was not thrown. This was because the previous function checked
    whether the position in the argument was the last element in the list (just like the next method) to throw the
    position exception, when it should have checked whether it was the first element. Thus, I changed line 165 from
    "if (this.last(p)) {"  to "if (this.first(p)) {"
    2. hasNext function within iterator - Checks whether current is at the tail, which is true for forward
    iterators. However, if the iterator is a reverse iterator, it should instead check whether current is
    at the head. I found this error through my "backwardIteration" test

Part D:
    My approach to generating the datasets was to use the filewriter and random packages. I generated 5 files
    of data as follows
    1. 100,000 integers, all randomly generated between 0 - 100
    2. 100,000 integers, 25% chance of being a 1, else randomly generated between 0 - 100
    3. 100,000 integers, 50% chance of being a 1, else randomly generated between 0 - 100
    4. 100,000 integers, 75% chance of being a 1, else randomly generated between 0 - 100
    5. 100,000 integers, all 1
    I ran the unique program on these 5 datasets with each implementation of the priority queue. As expected, the
    number of unique integers outputted back decreased with each file, until only a 1 was printed for file 5.