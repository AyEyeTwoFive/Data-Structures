Part A:
    AVL Tree Testing: I first wanted to test each of the possible types of rotations in the simplest way possible. The
    4 main rotation types are left and right single rotations, and left-right or right-left double rotation. Thus, I
    created 4 tests cases for each of these by simply inserting the keys one, two, and three in different orders to
    test the different rotation types as follows: 1) one, two, three for left rotation, 2) three, two, one for right
    rotation, 3) three, one, two for LR rotation, and 4) one, three, two for RL rotation. These are illustrated below:

    1.    1                                   2
           \                                 / \
             2       ------------>          1   3
              \       left rotation
               3         of 1

    2.       3
            /                              2
           2     ------------->           / \
          /     right rotation           1   3
         1         of 3

    3.    3                               3
         /                               /
        1       ------------->          2        -------------->          2
         \      left rotation          /         right rotation          / \
          2          of 1             1              of 3               1   3

    4.    1                            1
           \                            \
            2    ------------->          2        -------------->          2
           /     right rotation           \         left rotation         / \
          3          of 2                  3          of 1               1   3

    After these 4 tests, I then added a couple more in which I inserted a much greater number of nodes and then
    made sure that the height and balance factors satisfied the AVL tree properties. These tests, especially
    the "randomInsertAndRemove" one, were I believe quite robust to ensure satisfying AVL specifications.

    Treap Map Testing:
    First of all, for testing of treap map I had to create a new constructor and insert method
    in which priorities can be passed as input arguments rather than randomly generated.
    Similarly to with the AVL Tree Map, I first wanted to test the basic rotation types that are possible for
    the treap. In this case onl a single left or right rotation will ever occur. To test the left rotation
    I did a test case where key 2 with priority 2 was inserted, then a key 1 with priority 1, then key 3 with
    priority 3. Thus, a left rotation must be done so that the key of 3 is at the root. For the right rotation
    test, the test case had key 2 with priority 2 inserted, then a key 1 with priority 3, then key 3 with
    priority 1, so a right rotation is done so that the key of 1 is at the root. These are illustrated below:
    (keys, (priorities))

    1.       2 (2)                                       3 (3)
            /    \         ------->                     /
          1 (1)   3 (3)   right rotation             2 (2)
                                                     /
                                                   1 (1)


    2.       2 (2)                                1 (3)
             /    \         ------->                  \
           1 (3)   3 (1)   left rotation              2 (2)
                                                          \
                                                            3 (1)


    After testing the basic rotations, similarly to what I did for AVL tree, I added a few additional, more
    robust tests with greater number of elements, and checked for satisfaction of the treap properties.

Part D:
                         SimpleMap         BinarySearchTreeMap       AVLTreeMap       TreapMap
    biased 1k              0.284                    0.316
    biased 10k             0.864                    1.236
    biased 100k            6.771                    3.443
    mixed 1k               0.472                    0.543
    mixed 10k              2.675                    2.192
    mixed 100k            14.914                    5.544
    rand 1k                0.668                    0.748
    rand 10k               3.933                    2.770
    rand 100k             15.714
    sorted 1k              0.616
    sorted 10k             4.102
    sorted 100k           15.077
